---
swagger: "2.0"
info:
  description: "Sample API document for Users service"
  version: "0.1.0"
  title: "Users Service"
  contact:
    email: "hello@example.com"
host: "users.example.com"
basePath: "/v1"
tags:
- name: "user"
  description: "Operations on user"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "User name to return."
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name to be updated"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        400:
          description: "Invalid user provided"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name to be deleted"
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        400:
          description: "Invalid username provided"
        404:
          description: "User not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      id: 0
      email: "email"
      username: "username"
